// Generated by CoffeeScript 1.9.0
var PlayerClient, PlayerCore,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

PlayerCore = (function() {
  PlayerCore.copyPos = function(pos) {
    return {
      x: pos.x,
      y: pos.y
    };
  };

  PlayerCore.addPos = function(pos, vec) {
    return {
      x: pos.x + vec.x,
      y: pos.y + vec.y
    };
  };

  PlayerCore.lerp = function(n1, n2, t) {
    var _t;
    n1 = Number(n1);
    n2 = Number(n2);
    _t = Number(t);
    _t = Number(Math.max(0, Math.min(1, _t))).toFixed(3);
    return parseFloat(n1 + _t * (n2 - n1)).toFixed(3);
  };

  PlayerCore.lerpPos = function(pos1, pos2, time) {
    return {
      x: this.lerp(pos1.x, pos2.x, time),
      y: this.lerp(pos1.y, pos2.y, time)
    };
  };

  function PlayerCore(_at_game, _at_server_player_instance, _at_client) {
    this.game = _at_game;
    this.server_player_instance = _at_server_player_instance;
    this.client = _at_client != null ? _at_client : false;
    this.state = 'not-connected';
    this.pos = {
      x: 0,
      y: 0
    };
    this.id = '';
    this.publicid = '';
    if (!this.client) {
      this.id = this.server_player_instance.userid;
      this.publicid = this.server_player_instance.publicid;
    }
    this.old_state = {
      pos: {
        x: 0,
        y: 0
      }
    };
    this.cur_state = {
      pos: {
        x: 0,
        y: 0
      }
    };
    this.state_time = new Date().getTime();
    this.inputs = [];
    this.last_input_seq = 0;
    this.last_input_time = null;
  }

  PlayerCore.prototype.setPos = function(x, y) {
    this.pos.x = x;
    return this.pos.y = y;
  };

  return PlayerCore;

})();

PlayerClient = (function(_super) {
  __extends(PlayerClient, _super);

  function PlayerClient(_at_game) {
    this.game = _at_game;
    PlayerClient.__super__.constructor.call(this, this.game, null, true);
    this.sprite = null;
    this.name = null;
    this.initSprite();
  }

  PlayerClient.prototype.initSprite = function() {
    if (this.sprite !== null) {
      return;
    }
    if (!this.game.phaserLoaded) {
      return;
    }
    this.sprite = this.game.phaserGame.add.sprite(0, 0, 'player');
    return this.name = this.game.phaserGame.add.text(0, 0, this.publicid);
  };

  PlayerClient.prototype.setPos = function(x, y) {
    PlayerClient.__super__.setPos.call(this, x, y);
    if (this.sprite !== null) {
      this.sprite.x = x;
      this.sprite.y = y;
      this.name.x = x;
      return this.name.y = y;
    }
  };

  return PlayerClient;

})(PlayerCore);

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  exports.PlayerCore = PlayerCore;
  exports.PlayerClient = PlayerClient;
} else {
  window.PlayerCore = PlayerCore;
  window.PlayerClient = PlayerClient;
}
